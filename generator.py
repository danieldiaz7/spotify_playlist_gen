import spotipy
from spotipy.oauth2 import SpotifyOAuth

import streamlit as st
from groq import Groq

import json

from dotenv import load_dotenv

load_dotenv()

import os
client = Groq(api_key=os.environ.get("GROQ_API_KEY"))

################################################################################################################################################################
# - potential features
#   - allow users to type in how they are like feeling (eg. im feeling pretty down can you make me a playlist to lift me up)
#
################################################################################################################################################################


# Main function
def main():
    # # Authenticate with Spotify
    # sp = Generator()

    # # Example: Get the current user's profile
    # try:
    #     current_user = sp.spotipy.current_user()
    #     print(f"Logged in as: {current_user['display_name']}")
    # except Exception as e:
    #     print(f"Error fetching user information: {e}")

    # desired_song = "APT Bruno Mars"
    # sp.get_song_details(desired_song)

    # track_id = '3n3Ppam7vgaVa1iaRUc9Lp'
    # sp.get_recommendations(track_id)

    with st.form("Playlist generation"):
        prompt = st.text_input("Describe the music you'd like to hear..")
        song_count = st.slider("Songs", 1, 5, 10)
        submitted = st.form_submit_button("Generate Playlist")

    if not submitted:
        return

    response = client.chat.completions.create(
        model = "llama-3.3-70b-versatile",
        messages=[
            {
                'role': "system",
                'content': "You are MusicGPT, the world's best music recommendation AI. When given a description of a user's music preference, you will recommend songs tailored to the user's preference."
            },
            {
                'role': "user",
                'content': f"Create a playlist with {song_count} songs that fit the following description: '''{prompt}'''. Come up with a create and unique name for the playlist."
            }
        ],
        functions=[
            {
                'name': "create_playlist",
                'description': "Creates a spotify playlist based on a list of songs that should be added to the list.",
                'parameters' : {
                    'type': "object",
                    'properties': {
                        'playlist_name': {
                            'type': "string",
                            'description': "Name of playlist"
                        },
                        'playlist_description': {
                            'type': "string",
                            'description': "Description for the playlist. Please add that this playlist was generated by an AI.",
                        },
                        'songs': {
                            'type': "array",
                            'items': {
                                'type': "object",
                                'properties': {
                                    'song_name': {
                                        'type': "string",
                                        'description': "Name of the song that should be added to the playlist.",
                                    },
                                    'artists': {
                                        'type': "array",
                                        'description': "List of all artists",
                                        'items': {
                                            'type': "string",
                                            'description': "Name of the artist of the song"
                                        },
                                    },
                                },
                                'required': ['song_name', 'artists'],
                            },
                        },
                    },
                    'required': ['songs', 'playlist_name', 'playlist_description'],
                },
            }
        ],
    )

    args = json.loads(response.choices[0].message)
    st.write(args)


if __name__ == "__main__":
    main()